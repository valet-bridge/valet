from enum import Enum

# Same order as in DDS

class VUL_ABSOLUTE(Enum):
  VUL_ABS_NONE = 0
  VUL_ABS_BOTH = 1
  VUL_ABS_NS = 2
  VUL_ABS_EW = 3

VUL_ABSOLUTE_NAMES = [ "None", "Both", "NS", "EW" ]


class VUL_RELATIVE(Enum):
  VUL_REL_NONE = 0
  VUL_REL_BOTH = 1
  VUL_REL_ONLY_WE = 2
  VUL_REL_ONLY_THEY = 3

VUL_RELATIVE_NAMES = [ "None", "Both", "We", "They" ]

# Indexed by absolute vulnerability and absolute player position (0..3).
# Player 0 is North (DDS encoding).

VUL_ABS_REL_MAP = [
  [ 0, 0, 0, 0 ], # None vul. (abs.)
  [ 1, 1, 1, 1 ], # Both vul. (abs.)
  [ 2, 3, 2, 3 ], # NS vul. (abs.)
  [ 3, 2, 3, 2 ]] # EW vul. (abs.)
  

class Vulnerability:

  def __init__(self):
    self.name2abs = {}
    self.name2rel = {}
    for i, v in enumerate(VUL_ABSOLUTE_NAMES):
      self.name2abs[v] = i
    for i, v in enumerate(VUL_RELATIVE_NAMES):
      self.name2rel[v] = i


  def relative(self, abs_string, position_0123):
    assert abs_string in self.name2abs
    return VUL_ABS_REL_MAP[self.name2abs[abs_string]][position_0123]

  def tag_to_relative(self, rel_string):
    assert rel_string in self.name2rel
    return self.name2rel[rel_string]

